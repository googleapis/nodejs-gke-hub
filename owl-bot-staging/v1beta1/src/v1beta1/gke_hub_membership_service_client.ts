// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **

/* global window */
import * as gax from 'google-gax';
import {Callback, CallOptions, Descriptors, ClientOptions, LROperation, PaginationCallback, GaxCall} from 'google-gax';

import { Transform } from 'stream';
import { RequestType } from 'google-gax/build/src/apitypes';
import * as protos from '../../protos/protos';
import jsonProtos = require('../../protos/protos.json');
/**
 * Client JSON configuration object, loaded from
 * `src/v1beta1/gke_hub_membership_service_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
import * as gapicConfig from './gke_hub_membership_service_client_config.json';
import { operationsProtos } from 'google-gax';
const version = require('../../../package.json').version;

/**
 *  GKE Hub CRUD API for the Membership resource.
 *  The Membership service is currently only available in the global location.
 * @class
 * @memberof v1beta1
 */
export class GkeHubMembershipServiceClient {
  private _terminated = false;
  private _opts: ClientOptions;
  private _gaxModule: typeof gax | typeof gax.fallback;
  private _gaxGrpc: gax.GrpcClient | gax.fallback.GrpcClient;
  private _protos: {};
  private _defaults: {[method: string]: gax.CallSettings};
  auth: gax.GoogleAuth;
  descriptors: Descriptors = {
    page: {},
    stream: {},
    longrunning: {},
    batching: {},
  };
  innerApiCalls: {[name: string]: Function};
  pathTemplates: {[name: string]: gax.PathTemplate};
  operationsClient: gax.OperationsClient;
  gkeHubMembershipServiceStub?: Promise<{[name: string]: Function}>;

  /**
   * Construct an instance of GkeHubMembershipServiceClient.
   *
   * @param {object} [options] - The configuration object.
   * The options accepted by the constructor are described in detail
   * in [this document](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#creating-the-client-instance).
   * The common options are:
   * @param {object} [options.credentials] - Credentials object.
   * @param {string} [options.credentials.client_email]
   * @param {string} [options.credentials.private_key]
   * @param {string} [options.email] - Account email address. Required when
   *     using a .pem or .p12 keyFilename.
   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
   *     .p12 key downloaded from the Google Developers Console. If you provide
   *     a path to a JSON file, the projectId option below is not necessary.
   *     NOTE: .pem and .p12 require you to specify options.email as well.
   * @param {number} [options.port] - The port on which to connect to
   *     the remote host.
   * @param {string} [options.projectId] - The project ID from the Google
   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
   *     the environment variable GCLOUD_PROJECT for your project ID. If your
   *     app is running in an environment which supports
   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
   *     your project ID will be detected automatically.
   * @param {string} [options.apiEndpoint] - The domain name of the
   *     API remote host.
   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
   *     Follows the structure of {@link gapicConfig}.
   * @param {boolean} [options.fallback] - Use HTTP fallback mode.
   *     In fallback mode, a special browser-compatible transport implementation is used
   *     instead of gRPC transport. In browser context (if the `window` object is defined)
   *     the fallback mode is enabled automatically; set `options.fallback` to `false`
   *     if you need to override this behavior.
   */
  constructor(opts?: ClientOptions) {
    // Ensure that options include all the required fields.
    const staticMembers = this.constructor as typeof GkeHubMembershipServiceClient;
    const servicePath = opts?.servicePath || opts?.apiEndpoint || staticMembers.servicePath;
    const port = opts?.port || staticMembers.port;
    const clientConfig = opts?.clientConfig ?? {};
    const fallback = opts?.fallback ?? (typeof window !== 'undefined' && typeof window?.fetch === 'function');
    opts = Object.assign({servicePath, port, clientConfig, fallback}, opts);

    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
    if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {
      opts['scopes'] = staticMembers.scopes;
    }

    // Choose either gRPC or proto-over-HTTP implementation of google-gax.
    this._gaxModule = opts.fallback ? gax.fallback : gax;

    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);

    // Save options to use in initialize() method.
    this._opts = opts;

    // Save the auth object to the client, for use by other methods.
    this.auth = (this._gaxGrpc.auth as gax.GoogleAuth);

    // Set the default scopes in auth client if needed.
    if (servicePath === staticMembers.servicePath) {
      this.auth.defaultScopes = staticMembers.scopes;
    }

    // Determine the client header string.
    const clientHeader = [
      `gax/${this._gaxModule.version}`,
      `gapic/${version}`,
    ];
    if (typeof process !== 'undefined' && 'versions' in process) {
      clientHeader.push(`gl-node/${process.versions.node}`);
    } else {
      clientHeader.push(`gl-web/${this._gaxModule.version}`);
    }
    if (!opts.fallback) {
      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
    }
    if (opts.libName && opts.libVersion) {
      clientHeader.push(`${opts.libName}/${opts.libVersion}`);
    }
    // Load the applicable protos.
    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);

    // This API contains "path templates"; forward-slash-separated
    // identifiers to uniquely identify resources within the API.
    // Create useful helper objects for these.
    this.pathTemplates = {
      membershipPathTemplate: new this._gaxModule.PathTemplate(
        'projects/{project}/locations/{location}/memberships/{membership}'
      ),
    };

    // Some of the methods on this service return "paged" results,
    // (e.g. 50 results at a time, with tokens to get subsequent
    // pages). Denote the keys used for pagination and results.
    this.descriptors.page = {
      listMemberships:
          new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'resources')
    };

    const protoFilesRoot = this._gaxModule.protobuf.Root.fromJSON(jsonProtos);

    // This API contains "long-running operations", which return a
    // an Operation object that allows for tracking of the operation,
    // rather than holding a request open.

    this.operationsClient = this._gaxModule.lro({
      auth: this.auth,
      grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined
    }).operationsClient(opts);
    const createMembershipResponse = protoFilesRoot.lookup(
      '.google.cloud.gkehub.v1beta1.Membership') as gax.protobuf.Type;
    const createMembershipMetadata = protoFilesRoot.lookup(
      '.google.cloud.gkehub.v1beta1.OperationMetadata') as gax.protobuf.Type;
    const deleteMembershipResponse = protoFilesRoot.lookup(
      '.google.protobuf.Empty') as gax.protobuf.Type;
    const deleteMembershipMetadata = protoFilesRoot.lookup(
      '.google.cloud.gkehub.v1beta1.OperationMetadata') as gax.protobuf.Type;
    const updateMembershipResponse = protoFilesRoot.lookup(
      '.google.cloud.gkehub.v1beta1.Membership') as gax.protobuf.Type;
    const updateMembershipMetadata = protoFilesRoot.lookup(
      '.google.cloud.gkehub.v1beta1.OperationMetadata') as gax.protobuf.Type;

    this.descriptors.longrunning = {
      createMembership: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        createMembershipResponse.decode.bind(createMembershipResponse),
        createMembershipMetadata.decode.bind(createMembershipMetadata)),
      deleteMembership: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        deleteMembershipResponse.decode.bind(deleteMembershipResponse),
        deleteMembershipMetadata.decode.bind(deleteMembershipMetadata)),
      updateMembership: new this._gaxModule.LongrunningDescriptor(
        this.operationsClient,
        updateMembershipResponse.decode.bind(updateMembershipResponse),
        updateMembershipMetadata.decode.bind(updateMembershipMetadata))
    };

    // Put together the default options sent with requests.
    this._defaults = this._gaxGrpc.constructSettings(
        'google.cloud.gkehub.v1beta1.GkeHubMembershipService', gapicConfig as gax.ClientConfig,
        opts.clientConfig || {}, {'x-goog-api-client': clientHeader.join(' ')});

    // Set up a dictionary of "inner API calls"; the core implementation
    // of calling the API is handled in `google-gax`, with this code
    // merely providing the destination and request information.
    this.innerApiCalls = {};
  }

  /**
   * Initialize the client.
   * Performs asynchronous operations (such as authentication) and prepares the client.
   * This function will be called automatically when any class method is called for the
   * first time, but if you need to initialize it before calling an actual method,
   * feel free to call initialize() directly.
   *
   * You can await on this method if you want to make sure the client is initialized.
   *
   * @returns {Promise} A promise that resolves to an authenticated service stub.
   */
  initialize() {
    // If the client stub promise is already initialized, return immediately.
    if (this.gkeHubMembershipServiceStub) {
      return this.gkeHubMembershipServiceStub;
    }

    // Put together the "service stub" for
    // google.cloud.gkehub.v1beta1.GkeHubMembershipService.
    this.gkeHubMembershipServiceStub = this._gaxGrpc.createStub(
        this._opts.fallback ?
          (this._protos as protobuf.Root).lookupService('google.cloud.gkehub.v1beta1.GkeHubMembershipService') :
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
          (this._protos as any).google.cloud.gkehub.v1beta1.GkeHubMembershipService,
        this._opts) as Promise<{[method: string]: Function}>;

    // Iterate over each of the methods that the service provides
    // and create an API call method for each.
    const gkeHubMembershipServiceStubMethods =
        ['listMemberships', 'getMembership', 'createMembership', 'deleteMembership', 'updateMembership', 'generateConnectManifest', 'validateExclusivity', 'generateExclusivityManifest'];
    for (const methodName of gkeHubMembershipServiceStubMethods) {
      const callPromise = this.gkeHubMembershipServiceStub.then(
        stub => (...args: Array<{}>) => {
          if (this._terminated) {
            return Promise.reject('The client has already been closed.');
          }
          const func = stub[methodName];
          return func.apply(stub, args);
        },
        (err: Error|null|undefined) => () => {
          throw err;
        });

      const descriptor =
        this.descriptors.page[methodName] ||
        this.descriptors.longrunning[methodName] ||
        undefined;
      const apiCall = this._gaxModule.createApiCall(
        callPromise,
        this._defaults[methodName],
        descriptor
      );

      this.innerApiCalls[methodName] = apiCall;
    }

    return this.gkeHubMembershipServiceStub;
  }

  /**
   * The DNS address for this API service.
   * @returns {string} The DNS address for this service.
   */
  static get servicePath() {
    return 'gkehub.googleapis.com';
  }

  /**
   * The DNS address for this API service - same as servicePath(),
   * exists for compatibility reasons.
   * @returns {string} The DNS address for this service.
   */
  static get apiEndpoint() {
    return 'gkehub.googleapis.com';
  }

  /**
   * The port for this API service.
   * @returns {number} The default port for this service.
   */
  static get port() {
    return 443;
  }

  /**
   * The scopes needed to make gRPC calls for every method defined
   * in this service.
   * @returns {string[]} List of default scopes.
   */
  static get scopes() {
    return [
      'https://www.googleapis.com/auth/cloud-platform'
    ];
  }

  getProjectId(): Promise<string>;
  getProjectId(callback: Callback<string, undefined, undefined>): void;
  /**
   * Return the project ID used by this class.
   * @returns {Promise} A promise that resolves to string containing the project ID.
   */
  getProjectId(callback?: Callback<string, undefined, undefined>):
      Promise<string>|void {
    if (callback) {
      this.auth.getProjectId(callback);
      return;
    }
    return this.auth.getProjectId();
  }

  // -------------------
  // -- Service calls --
  // -------------------
  getMembership(
      request: protos.google.cloud.gkehub.v1beta1.IGetMembershipRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.gkehub.v1beta1.IMembership,
        protos.google.cloud.gkehub.v1beta1.IGetMembershipRequest|undefined, {}|undefined
      ]>;
  getMembership(
      request: protos.google.cloud.gkehub.v1beta1.IGetMembershipRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.gkehub.v1beta1.IMembership,
          protos.google.cloud.gkehub.v1beta1.IGetMembershipRequest|null|undefined,
          {}|null|undefined>): void;
  getMembership(
      request: protos.google.cloud.gkehub.v1beta1.IGetMembershipRequest,
      callback: Callback<
          protos.google.cloud.gkehub.v1beta1.IMembership,
          protos.google.cloud.gkehub.v1beta1.IGetMembershipRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Gets the details of a Membership.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The Membership resource name in the format
 *   `projects/* /locations/* /memberships/*`.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [Membership]{@link google.cloud.gkehub.v1beta1.Membership}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.getMembership(request);
 */
  getMembership(
      request: protos.google.cloud.gkehub.v1beta1.IGetMembershipRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.gkehub.v1beta1.IMembership,
          protos.google.cloud.gkehub.v1beta1.IGetMembershipRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.gkehub.v1beta1.IMembership,
          protos.google.cloud.gkehub.v1beta1.IGetMembershipRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.gkehub.v1beta1.IMembership,
        protos.google.cloud.gkehub.v1beta1.IGetMembershipRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.getMembership(request, options, callback);
  }
  generateConnectManifest(
      request: protos.google.cloud.gkehub.v1beta1.IGenerateConnectManifestRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.gkehub.v1beta1.IGenerateConnectManifestResponse,
        protos.google.cloud.gkehub.v1beta1.IGenerateConnectManifestRequest|undefined, {}|undefined
      ]>;
  generateConnectManifest(
      request: protos.google.cloud.gkehub.v1beta1.IGenerateConnectManifestRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.gkehub.v1beta1.IGenerateConnectManifestResponse,
          protos.google.cloud.gkehub.v1beta1.IGenerateConnectManifestRequest|null|undefined,
          {}|null|undefined>): void;
  generateConnectManifest(
      request: protos.google.cloud.gkehub.v1beta1.IGenerateConnectManifestRequest,
      callback: Callback<
          protos.google.cloud.gkehub.v1beta1.IGenerateConnectManifestResponse,
          protos.google.cloud.gkehub.v1beta1.IGenerateConnectManifestRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * Generates the manifest for deployment of the GKE connect agent.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The Membership resource name the Agent will associate with, in the format
 *   `projects/* /locations/* /memberships/*`.
 * @param {google.cloud.gkehub.v1beta1.ConnectAgent} [request.connectAgent]
 *   Optional. The connect agent to generate manifest for.
 * @param {string} [request.version]
 *   Optional. The Connect agent version to use. Defaults to the most current version.
 * @param {boolean} [request.isUpgrade]
 *   Optional. If true, generate the resources for upgrade only. Some resources
 *   generated only for installation (e.g. secrets) will be excluded.
 * @param {string} [request.registry]
 *   Optional. The registry to fetch the connect agent image from. Defaults to
 *   gcr.io/gkeconnect.
 * @param {Buffer} [request.imagePullSecretContent]
 *   Optional. The image pull secret content for the registry, if not public.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [GenerateConnectManifestResponse]{@link google.cloud.gkehub.v1beta1.GenerateConnectManifestResponse}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.generateConnectManifest(request);
 */
  generateConnectManifest(
      request: protos.google.cloud.gkehub.v1beta1.IGenerateConnectManifestRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.gkehub.v1beta1.IGenerateConnectManifestResponse,
          protos.google.cloud.gkehub.v1beta1.IGenerateConnectManifestRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.gkehub.v1beta1.IGenerateConnectManifestResponse,
          protos.google.cloud.gkehub.v1beta1.IGenerateConnectManifestRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.gkehub.v1beta1.IGenerateConnectManifestResponse,
        protos.google.cloud.gkehub.v1beta1.IGenerateConnectManifestRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.generateConnectManifest(request, options, callback);
  }
  validateExclusivity(
      request: protos.google.cloud.gkehub.v1beta1.IValidateExclusivityRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.gkehub.v1beta1.IValidateExclusivityResponse,
        protos.google.cloud.gkehub.v1beta1.IValidateExclusivityRequest|undefined, {}|undefined
      ]>;
  validateExclusivity(
      request: protos.google.cloud.gkehub.v1beta1.IValidateExclusivityRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.gkehub.v1beta1.IValidateExclusivityResponse,
          protos.google.cloud.gkehub.v1beta1.IValidateExclusivityRequest|null|undefined,
          {}|null|undefined>): void;
  validateExclusivity(
      request: protos.google.cloud.gkehub.v1beta1.IValidateExclusivityRequest,
      callback: Callback<
          protos.google.cloud.gkehub.v1beta1.IValidateExclusivityResponse,
          protos.google.cloud.gkehub.v1beta1.IValidateExclusivityRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * ValidateExclusivity validates the state of exclusivity in the cluster.
 * The validation does not depend on an existing Hub membership resource.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent (project and location) where the Memberships will be created.
 *   Specified in the format `projects/* /locations/*`.
 * @param {string} [request.crManifest]
 *   Optional. The YAML of the membership CR in the cluster. Empty if the membership
 *   CR does not exist.
 * @param {string} request.intendedMembership
 *   Required. The intended membership name under the `parent`. This method only does
 *   validation in anticipation of a CreateMembership call with the same name.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [ValidateExclusivityResponse]{@link google.cloud.gkehub.v1beta1.ValidateExclusivityResponse}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.validateExclusivity(request);
 */
  validateExclusivity(
      request: protos.google.cloud.gkehub.v1beta1.IValidateExclusivityRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.gkehub.v1beta1.IValidateExclusivityResponse,
          protos.google.cloud.gkehub.v1beta1.IValidateExclusivityRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.gkehub.v1beta1.IValidateExclusivityResponse,
          protos.google.cloud.gkehub.v1beta1.IValidateExclusivityRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.gkehub.v1beta1.IValidateExclusivityResponse,
        protos.google.cloud.gkehub.v1beta1.IValidateExclusivityRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    this.initialize();
    return this.innerApiCalls.validateExclusivity(request, options, callback);
  }
  generateExclusivityManifest(
      request: protos.google.cloud.gkehub.v1beta1.IGenerateExclusivityManifestRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.gkehub.v1beta1.IGenerateExclusivityManifestResponse,
        protos.google.cloud.gkehub.v1beta1.IGenerateExclusivityManifestRequest|undefined, {}|undefined
      ]>;
  generateExclusivityManifest(
      request: protos.google.cloud.gkehub.v1beta1.IGenerateExclusivityManifestRequest,
      options: CallOptions,
      callback: Callback<
          protos.google.cloud.gkehub.v1beta1.IGenerateExclusivityManifestResponse,
          protos.google.cloud.gkehub.v1beta1.IGenerateExclusivityManifestRequest|null|undefined,
          {}|null|undefined>): void;
  generateExclusivityManifest(
      request: protos.google.cloud.gkehub.v1beta1.IGenerateExclusivityManifestRequest,
      callback: Callback<
          protos.google.cloud.gkehub.v1beta1.IGenerateExclusivityManifestResponse,
          protos.google.cloud.gkehub.v1beta1.IGenerateExclusivityManifestRequest|null|undefined,
          {}|null|undefined>): void;
/**
 * GenerateExclusivityManifest generates the manifests to update the
 * exclusivity artifacts in the cluster if needed.
 *
 * Exclusivity artifacts include the Membership custom resource definition
 * (CRD) and the singleton Membership custom resource (CR). Combined with
 * ValidateExclusivity, exclusivity artifacts guarantee that a Kubernetes
 * cluster is only registered to a single GKE Hub.
 *
 * The Membership CRD is versioned, and may require conversion when the GKE
 * Hub API server begins serving a newer version of the CRD and
 * corresponding CR. The response will be the converted CRD and CR if there
 * are any differences between the versions.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The Membership resource name in the format
 *   `projects/* /locations/* /memberships/*`.
 * @param {string} [request.crdManifest]
 *   Optional. The YAML manifest of the membership CRD retrieved by
 *   `kubectl get customresourcedefinitions membership`.
 *   Leave empty if the resource does not exist.
 * @param {string} [request.crManifest]
 *   Optional. The YAML manifest of the membership CR retrieved by
 *   `kubectl get memberships membership`.
 *   Leave empty if the resource does not exist.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing [GenerateExclusivityManifestResponse]{@link google.cloud.gkehub.v1beta1.GenerateExclusivityManifestResponse}.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)
 *   for more details and examples.
 * @example
 * const [response] = await client.generateExclusivityManifest(request);
 */
  generateExclusivityManifest(
      request: protos.google.cloud.gkehub.v1beta1.IGenerateExclusivityManifestRequest,
      optionsOrCallback?: CallOptions|Callback<
          protos.google.cloud.gkehub.v1beta1.IGenerateExclusivityManifestResponse,
          protos.google.cloud.gkehub.v1beta1.IGenerateExclusivityManifestRequest|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          protos.google.cloud.gkehub.v1beta1.IGenerateExclusivityManifestResponse,
          protos.google.cloud.gkehub.v1beta1.IGenerateExclusivityManifestRequest|null|undefined,
          {}|null|undefined>):
      Promise<[
        protos.google.cloud.gkehub.v1beta1.IGenerateExclusivityManifestResponse,
        protos.google.cloud.gkehub.v1beta1.IGenerateExclusivityManifestRequest|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.generateExclusivityManifest(request, options, callback);
  }

  createMembership(
      request: protos.google.cloud.gkehub.v1beta1.ICreateMembershipRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.cloud.gkehub.v1beta1.IMembership, protos.google.cloud.gkehub.v1beta1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  createMembership(
      request: protos.google.cloud.gkehub.v1beta1.ICreateMembershipRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.cloud.gkehub.v1beta1.IMembership, protos.google.cloud.gkehub.v1beta1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  createMembership(
      request: protos.google.cloud.gkehub.v1beta1.ICreateMembershipRequest,
      callback: Callback<
          LROperation<protos.google.cloud.gkehub.v1beta1.IMembership, protos.google.cloud.gkehub.v1beta1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
/**
 * Adds a new Membership.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent (project and location) where the Memberships will be created.
 *   Specified in the format `projects/* /locations/*`.
 * @param {string} request.membershipId
 *   Required. Client chosen ID for the membership. `membership_id` must be a valid RFC
 *   1123 compliant DNS label:
 *
 *     1. At most 63 characters in length
 *     2. It must consist of lower case alphanumeric characters or `-`
 *     3. It must start and end with an alphanumeric character
 *
 *   Which can be expressed as the regex: `[a-z0-9]([-a-z0-9]*[a-z0-9])?`,
 *   with a maximum length of 63 characters.
 * @param {google.cloud.gkehub.v1beta1.Membership} request.resource
 *   Required. The membership to create.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example
 * const [operation] = await client.createMembership(request);
 * const [response] = await operation.promise();
 */
  createMembership(
      request: protos.google.cloud.gkehub.v1beta1.ICreateMembershipRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.cloud.gkehub.v1beta1.IMembership, protos.google.cloud.gkehub.v1beta1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.cloud.gkehub.v1beta1.IMembership, protos.google.cloud.gkehub.v1beta1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.cloud.gkehub.v1beta1.IMembership, protos.google.cloud.gkehub.v1beta1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    this.initialize();
    return this.innerApiCalls.createMembership(request, options, callback);
  }
/**
 * Check the status of the long running operation returned by `createMembership()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example
 * const decodedOperation = await checkCreateMembershipProgress(name);
 * console.log(decodedOperation.result);
 * console.log(decodedOperation.done);
 * console.log(decodedOperation.metadata);
 */
  async checkCreateMembershipProgress(name: string): Promise<LROperation<protos.google.cloud.gkehub.v1beta1.Membership, protos.google.cloud.gkehub.v1beta1.OperationMetadata>>{
    const request = new operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new gax.Operation(operation, this.descriptors.longrunning.createMembership, gax.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.cloud.gkehub.v1beta1.Membership, protos.google.cloud.gkehub.v1beta1.OperationMetadata>;
  }
  deleteMembership(
      request: protos.google.cloud.gkehub.v1beta1.IDeleteMembershipRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.gkehub.v1beta1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  deleteMembership(
      request: protos.google.cloud.gkehub.v1beta1.IDeleteMembershipRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.gkehub.v1beta1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  deleteMembership(
      request: protos.google.cloud.gkehub.v1beta1.IDeleteMembershipRequest,
      callback: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.gkehub.v1beta1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
/**
 * Removes a Membership.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The Membership resource name in the format
 *   `projects/* /locations/* /memberships/*`.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example
 * const [operation] = await client.deleteMembership(request);
 * const [response] = await operation.promise();
 */
  deleteMembership(
      request: protos.google.cloud.gkehub.v1beta1.IDeleteMembershipRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.gkehub.v1beta1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.gkehub.v1beta1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.protobuf.IEmpty, protos.google.cloud.gkehub.v1beta1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.deleteMembership(request, options, callback);
  }
/**
 * Check the status of the long running operation returned by `deleteMembership()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example
 * const decodedOperation = await checkDeleteMembershipProgress(name);
 * console.log(decodedOperation.result);
 * console.log(decodedOperation.done);
 * console.log(decodedOperation.metadata);
 */
  async checkDeleteMembershipProgress(name: string): Promise<LROperation<protos.google.protobuf.Empty, protos.google.cloud.gkehub.v1beta1.OperationMetadata>>{
    const request = new operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new gax.Operation(operation, this.descriptors.longrunning.deleteMembership, gax.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.protobuf.Empty, protos.google.cloud.gkehub.v1beta1.OperationMetadata>;
  }
  updateMembership(
      request: protos.google.cloud.gkehub.v1beta1.IUpdateMembershipRequest,
      options?: CallOptions):
      Promise<[
        LROperation<protos.google.cloud.gkehub.v1beta1.IMembership, protos.google.cloud.gkehub.v1beta1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>;
  updateMembership(
      request: protos.google.cloud.gkehub.v1beta1.IUpdateMembershipRequest,
      options: CallOptions,
      callback: Callback<
          LROperation<protos.google.cloud.gkehub.v1beta1.IMembership, protos.google.cloud.gkehub.v1beta1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
  updateMembership(
      request: protos.google.cloud.gkehub.v1beta1.IUpdateMembershipRequest,
      callback: Callback<
          LROperation<protos.google.cloud.gkehub.v1beta1.IMembership, protos.google.cloud.gkehub.v1beta1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>): void;
/**
 * Updates an existing Membership.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.name
 *   Required. The membership resource name in the format:
 *   `projects/[project_id]/locations/global/memberships/[membership_id]`
 * @param {google.protobuf.FieldMask} request.updateMask
 *   Required. Mask of fields to update. At least one field path must be specified in this
 *   mask.
 * @param {google.cloud.gkehub.v1beta1.Membership} request.resource
 *   Required. Only fields specified in update_mask are updated.
 *   If you specify a field in the update_mask but don't specify its value here
 *   that field will be deleted.
 *   If you are updating a map field, set the value of a key to null or empty
 *   string to delete the key from the map. It's not possible to update a key's
 *   value to the empty string.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is an object representing
 *   a long running operation. Its `promise()` method returns a promise
 *   you can `await` for.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example
 * const [operation] = await client.updateMembership(request);
 * const [response] = await operation.promise();
 */
  updateMembership(
      request: protos.google.cloud.gkehub.v1beta1.IUpdateMembershipRequest,
      optionsOrCallback?: CallOptions|Callback<
          LROperation<protos.google.cloud.gkehub.v1beta1.IMembership, protos.google.cloud.gkehub.v1beta1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>,
      callback?: Callback<
          LROperation<protos.google.cloud.gkehub.v1beta1.IMembership, protos.google.cloud.gkehub.v1beta1.IOperationMetadata>,
          protos.google.longrunning.IOperation|null|undefined,
          {}|null|undefined>):
      Promise<[
        LROperation<protos.google.cloud.gkehub.v1beta1.IMembership, protos.google.cloud.gkehub.v1beta1.IOperationMetadata>,
        protos.google.longrunning.IOperation|undefined, {}|undefined
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'name': request.name || '',
    });
    this.initialize();
    return this.innerApiCalls.updateMembership(request, options, callback);
  }
/**
 * Check the status of the long running operation returned by `updateMembership()`.
 * @param {String} name
 *   The operation name that will be passed.
 * @returns {Promise} - The promise which resolves to an object.
 *   The decoded operation object has result and metadata field to get information from.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)
 *   for more details and examples.
 * @example
 * const decodedOperation = await checkUpdateMembershipProgress(name);
 * console.log(decodedOperation.result);
 * console.log(decodedOperation.done);
 * console.log(decodedOperation.metadata);
 */
  async checkUpdateMembershipProgress(name: string): Promise<LROperation<protos.google.cloud.gkehub.v1beta1.Membership, protos.google.cloud.gkehub.v1beta1.OperationMetadata>>{
    const request = new operationsProtos.google.longrunning.GetOperationRequest({name});
    const [operation] = await this.operationsClient.getOperation(request);
    const decodeOperation = new gax.Operation(operation, this.descriptors.longrunning.updateMembership, gax.createDefaultBackoffSettings());
    return decodeOperation as LROperation<protos.google.cloud.gkehub.v1beta1.Membership, protos.google.cloud.gkehub.v1beta1.OperationMetadata>;
  }
  listMemberships(
      request: protos.google.cloud.gkehub.v1beta1.IListMembershipsRequest,
      options?: CallOptions):
      Promise<[
        protos.google.cloud.gkehub.v1beta1.IMembership[],
        protos.google.cloud.gkehub.v1beta1.IListMembershipsRequest|null,
        protos.google.cloud.gkehub.v1beta1.IListMembershipsResponse
      ]>;
  listMemberships(
      request: protos.google.cloud.gkehub.v1beta1.IListMembershipsRequest,
      options: CallOptions,
      callback: PaginationCallback<
          protos.google.cloud.gkehub.v1beta1.IListMembershipsRequest,
          protos.google.cloud.gkehub.v1beta1.IListMembershipsResponse|null|undefined,
          protos.google.cloud.gkehub.v1beta1.IMembership>): void;
  listMemberships(
      request: protos.google.cloud.gkehub.v1beta1.IListMembershipsRequest,
      callback: PaginationCallback<
          protos.google.cloud.gkehub.v1beta1.IListMembershipsRequest,
          protos.google.cloud.gkehub.v1beta1.IListMembershipsResponse|null|undefined,
          protos.google.cloud.gkehub.v1beta1.IMembership>): void;
/**
 * Lists Memberships in a given project and location.
 *
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent (project and location) where the Memberships will be listed.
 *   Specified in the format `projects/* /locations/*`.
 * @param {number} [request.pageSize]
 *   Optional. When requesting a 'page' of resources, `page_size` specifies number of
 *   resources to return. If unspecified or set to 0, all resources will
 *   be returned.
 * @param {string} [request.pageToken]
 *   Optional. Token returned by previous call to `ListMemberships` which
 *   specifies the position in the list from where to continue listing the
 *   resources.
 * @param {string} [request.filter]
 *   Optional. Lists Memberships that match the filter expression, following the syntax
 *   outlined in https://google.aip.dev/160.
 *
 *   Examples:
 *
 *     - Name is `bar` in project `foo-proj` and location `global`:
 *
 *         name = "projects/foo-proj/locations/global/membership/bar"
 *
 *     - Memberships that have a label called `foo`:
 *
 *         labels.foo:*
 *
 *     - Memberships that have a label called `foo` whose value is `bar`:
 *
 *         labels.foo = bar
 *
 *     - Memberships in the CREATING state:
 *
 *         state = CREATING
 * @param {string} [request.orderBy]
 *   Optional. One or more fields to compare and use to sort the output.
 *   See https://google.aip.dev/132#ordering.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Promise} - The promise which resolves to an array.
 *   The first element of the array is Array of [Membership]{@link google.cloud.gkehub.v1beta1.Membership}.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed and will merge results from all the pages into this array.
 *   Note that it can affect your quota.
 *   We recommend using `listMembershipsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listMemberships(
      request: protos.google.cloud.gkehub.v1beta1.IListMembershipsRequest,
      optionsOrCallback?: CallOptions|PaginationCallback<
          protos.google.cloud.gkehub.v1beta1.IListMembershipsRequest,
          protos.google.cloud.gkehub.v1beta1.IListMembershipsResponse|null|undefined,
          protos.google.cloud.gkehub.v1beta1.IMembership>,
      callback?: PaginationCallback<
          protos.google.cloud.gkehub.v1beta1.IListMembershipsRequest,
          protos.google.cloud.gkehub.v1beta1.IListMembershipsResponse|null|undefined,
          protos.google.cloud.gkehub.v1beta1.IMembership>):
      Promise<[
        protos.google.cloud.gkehub.v1beta1.IMembership[],
        protos.google.cloud.gkehub.v1beta1.IListMembershipsRequest|null,
        protos.google.cloud.gkehub.v1beta1.IListMembershipsResponse
      ]>|void {
    request = request || {};
    let options: CallOptions;
    if (typeof optionsOrCallback === 'function' && callback === undefined) {
      callback = optionsOrCallback;
      options = {};
    }
    else {
      options = optionsOrCallback as CallOptions;
    }
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    this.initialize();
    return this.innerApiCalls.listMemberships(request, options, callback);
  }

/**
 * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent (project and location) where the Memberships will be listed.
 *   Specified in the format `projects/* /locations/*`.
 * @param {number} [request.pageSize]
 *   Optional. When requesting a 'page' of resources, `page_size` specifies number of
 *   resources to return. If unspecified or set to 0, all resources will
 *   be returned.
 * @param {string} [request.pageToken]
 *   Optional. Token returned by previous call to `ListMemberships` which
 *   specifies the position in the list from where to continue listing the
 *   resources.
 * @param {string} [request.filter]
 *   Optional. Lists Memberships that match the filter expression, following the syntax
 *   outlined in https://google.aip.dev/160.
 *
 *   Examples:
 *
 *     - Name is `bar` in project `foo-proj` and location `global`:
 *
 *         name = "projects/foo-proj/locations/global/membership/bar"
 *
 *     - Memberships that have a label called `foo`:
 *
 *         labels.foo:*
 *
 *     - Memberships that have a label called `foo` whose value is `bar`:
 *
 *         labels.foo = bar
 *
 *     - Memberships in the CREATING state:
 *
 *         state = CREATING
 * @param {string} [request.orderBy]
 *   Optional. One or more fields to compare and use to sort the output.
 *   See https://google.aip.dev/132#ordering.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Stream}
 *   An object stream which emits an object representing [Membership]{@link google.cloud.gkehub.v1beta1.Membership} on 'data' event.
 *   The client library will perform auto-pagination by default: it will call the API as many
 *   times as needed. Note that it can affect your quota.
 *   We recommend using `listMembershipsAsync()`
 *   method described below for async iteration which you can stop as needed.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 */
  listMembershipsStream(
      request?: protos.google.cloud.gkehub.v1beta1.IListMembershipsRequest,
      options?: CallOptions):
    Transform{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listMemberships.createStream(
      this.innerApiCalls.listMemberships as gax.GaxCall,
      request,
      callSettings
    );
  }

/**
 * Equivalent to `listMemberships`, but returns an iterable object.
 *
 * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
 * @param {Object} request
 *   The request object that will be sent.
 * @param {string} request.parent
 *   Required. The parent (project and location) where the Memberships will be listed.
 *   Specified in the format `projects/* /locations/*`.
 * @param {number} [request.pageSize]
 *   Optional. When requesting a 'page' of resources, `page_size` specifies number of
 *   resources to return. If unspecified or set to 0, all resources will
 *   be returned.
 * @param {string} [request.pageToken]
 *   Optional. Token returned by previous call to `ListMemberships` which
 *   specifies the position in the list from where to continue listing the
 *   resources.
 * @param {string} [request.filter]
 *   Optional. Lists Memberships that match the filter expression, following the syntax
 *   outlined in https://google.aip.dev/160.
 *
 *   Examples:
 *
 *     - Name is `bar` in project `foo-proj` and location `global`:
 *
 *         name = "projects/foo-proj/locations/global/membership/bar"
 *
 *     - Memberships that have a label called `foo`:
 *
 *         labels.foo:*
 *
 *     - Memberships that have a label called `foo` whose value is `bar`:
 *
 *         labels.foo = bar
 *
 *     - Memberships in the CREATING state:
 *
 *         state = CREATING
 * @param {string} [request.orderBy]
 *   Optional. One or more fields to compare and use to sort the output.
 *   See https://google.aip.dev/132#ordering.
 * @param {object} [options]
 *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
 * @returns {Object}
 *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).
 *   When you iterate the returned iterable, each element will be an object representing
 *   [Membership]{@link google.cloud.gkehub.v1beta1.Membership}. The API will be called under the hood as needed, once per the page,
 *   so you can stop the iteration when you don't need more results.
 *   Please see the
 *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)
 *   for more details and examples.
 * @example
 * const iterable = client.listMembershipsAsync(request);
 * for await (const response of iterable) {
 *   // process response
 * }
 */
  listMembershipsAsync(
      request?: protos.google.cloud.gkehub.v1beta1.IListMembershipsRequest,
      options?: CallOptions):
    AsyncIterable<protos.google.cloud.gkehub.v1beta1.IMembership>{
    request = request || {};
    options = options || {};
    options.otherArgs = options.otherArgs || {};
    options.otherArgs.headers = options.otherArgs.headers || {};
    options.otherArgs.headers[
      'x-goog-request-params'
    ] = gax.routingHeader.fromParams({
      'parent': request.parent || '',
    });
    options = options || {};
    const callSettings = new gax.CallSettings(options);
    this.initialize();
    return this.descriptors.page.listMemberships.asyncIterate(
      this.innerApiCalls['listMemberships'] as GaxCall,
      request as unknown as RequestType,
      callSettings
    ) as AsyncIterable<protos.google.cloud.gkehub.v1beta1.IMembership>;
  }
  // --------------------
  // -- Path templates --
  // --------------------

  /**
   * Return a fully-qualified membership resource name string.
   *
   * @param {string} project
   * @param {string} location
   * @param {string} membership
   * @returns {string} Resource name string.
   */
  membershipPath(project:string,location:string,membership:string) {
    return this.pathTemplates.membershipPathTemplate.render({
      project: project,
      location: location,
      membership: membership,
    });
  }

  /**
   * Parse the project from Membership resource.
   *
   * @param {string} membershipName
   *   A fully-qualified path representing Membership resource.
   * @returns {string} A string representing the project.
   */
  matchProjectFromMembershipName(membershipName: string) {
    return this.pathTemplates.membershipPathTemplate.match(membershipName).project;
  }

  /**
   * Parse the location from Membership resource.
   *
   * @param {string} membershipName
   *   A fully-qualified path representing Membership resource.
   * @returns {string} A string representing the location.
   */
  matchLocationFromMembershipName(membershipName: string) {
    return this.pathTemplates.membershipPathTemplate.match(membershipName).location;
  }

  /**
   * Parse the membership from Membership resource.
   *
   * @param {string} membershipName
   *   A fully-qualified path representing Membership resource.
   * @returns {string} A string representing the membership.
   */
  matchMembershipFromMembershipName(membershipName: string) {
    return this.pathTemplates.membershipPathTemplate.match(membershipName).membership;
  }

  /**
   * Terminate the gRPC channel and close the client.
   *
   * The client will no longer be usable and all future behavior is undefined.
   * @returns {Promise} A promise that resolves when the client is closed.
   */
  close(): Promise<void> {
    this.initialize();
    if (!this._terminated) {
      return this.gkeHubMembershipServiceStub!.then(stub => {
        this._terminated = true;
        stub.close();
      });
    }
    return Promise.resolve();
  }
}
